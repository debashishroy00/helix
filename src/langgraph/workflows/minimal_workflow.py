"""
Helix Automation: Minimal LangGraph Workflow 
Phase 1: Basic integration with existing Helix Engine as Agent 4
"""

import asyncio
from typing import Dict, Any
from src.langgraph.state.helix_state import HelixAutomationState, create_initial_state  
from src.langgraph.agents.agent_4_helix.helix_element_finder import agent_4_helix_element_finder

# Note: LangGraph imports would be here in full implementation
# For Phase 1, we'll simulate the workflow structure

class MinimalHelixWorkflow:
    """
    Phase 1: Minimal LangGraph-style workflow 
    Simulates LangGraph structure until dependencies are installed
    """
    
    def __init__(self):
        self.nodes = {
            "helix_engine": agent_4_helix_element_finder
        }
        self.entry_point = "helix_engine"
    
    async def ainvoke(self, initial_state: HelixAutomationState) -> HelixAutomationState:
        """Execute the minimal workflow"""
        
        print("🚀 Starting Helix Automation minimal workflow...")
        print(f"📝 Input: {initial_state['raw_input'][:100]}...")
        
        # Execute Agent 4 (Helix Engine)
        final_state = await self.nodes[self.entry_point](initial_state)
        
        # For Phase 1: Simple completion logic
        if final_state["element_success_rate"] > 0.8:
            final_state["execution_ready"] = True
            final_state["confidence_score"] = final_state["element_success_rate"]
            final_state["final_script"] = generate_mock_script(final_state)
        else:
            final_state["execution_ready"] = False
            final_state["confidence_score"] = final_state["element_success_rate"]
        
        return final_state


def generate_mock_script(state: HelixAutomationState) -> str:
    """
    Phase 1: Generate a simple mock script based on found elements
    Later this will be replaced by Agent 6 (Script Generator)
    """
    
    script_lines = [
        "// Generated by Helix Automation - Phase 1",
        "// Minimal script generation for demonstration",
        "",
        "const { chromium } = require('playwright');",
        "",
        "async function runAutomation() {",
        "  const browser = await chromium.launch();",
        "  const page = await browser.newPage();",
        ""
    ]
    
    # Add actions based on found elements
    for strategy in state["element_strategies"]:
        if strategy["success"]:
            target = strategy["target"]
            selector = strategy["strategy"]["selector"]
            
            if target["element_type"] == "input":
                if "username" in target["semantic_intent"]:
                    script_lines.append(f"  await page.fill('{selector}', 'test@company.com');")
                elif "password" in target["semantic_intent"]:
                    script_lines.append(f"  await page.fill('{selector}', 'password123');")
            elif target["element_type"] == "button":
                script_lines.append(f"  await page.click('{selector}');")
                script_lines.append("  await page.waitForLoadState('networkidle');")
    
    script_lines.extend([
        "",
        "  await browser.close();",
        "}",
        "",
        "runAutomation().catch(console.error);"
    ])
    
    return "\n".join(script_lines)


async def test_minimal_workflow():
    """Test the minimal workflow end-to-end"""
    
    print("=" * 60)
    print("🧪 HELIX AUTOMATION - PHASE 1 TEST")
    print("Minimal LangGraph Integration with Existing Helix Engine")
    print("=" * 60)
    
    # Test cases
    test_cases = [
        {
            "name": "Salesforce Login Test",
            "input": """
            Login to Salesforce with username test@company.com
            Enter password password123
            Click login button
            """,
            "expected_elements": 3
        },
        {
            "name": "Salesforce Navigation Test", 
            "input": """
            Click the app launcher button
            Search for Opportunities
            Create new opportunity
            """,
            "expected_elements": 3
        }
    ]
    
    workflow = MinimalHelixWorkflow()
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n📋 Test Case {i}: {test_case['name']}")
        print("-" * 40)
        
        # Create initial state
        initial_state = create_initial_state(
            raw_input=test_case["input"],
            input_metadata={"format": "plain_text", "test_case": test_case["name"]}
        )
        
        # Execute workflow
        try:
            result = await workflow.ainvoke(initial_state)
            
            # Display results
            print(f"✅ Workflow completed successfully!")
            print(f"📊 Results:")
            print(f"   - Elements found: {len(result['element_strategies'])}")
            print(f"   - Success rate: {result['element_success_rate']:.1%}")
            print(f"   - Execution ready: {result['execution_ready']}")
            print(f"   - Confidence score: {result['confidence_score']:.1%}")
            
            if result['errors']:
                print(f"⚠️  Errors ({len(result['errors'])}):")
                for error in result['errors']:
                    print(f"     {error}")
            
            if result['execution_ready']:
                print(f"📄 Generated script preview:")
                script_preview = result['final_script'][:300] + "..." if len(result['final_script']) > 300 else result['final_script']
                print(f"   {script_preview}")
                
        except Exception as e:
            print(f"❌ Workflow failed: {e}")
    
    print("\n" + "=" * 60)
    print("🎯 PHASE 1 INTEGRATION COMPLETE")
    print("✅ Helix Engine successfully wrapped as LangGraph Agent 4")
    print("✅ Minimal workflow operational")
    print("📋 Next: Implement Agent 1 (Parser) and Agent 2 (Intent Extractor)")
    print("=" * 60)


async def test_helix_engine_integration():
    """Test just the Helix Engine integration"""
    
    print("\n🔧 Testing Helix Engine Integration...")
    
    # Create a simple test
    initial_state = create_initial_state(
        raw_input="Click the login button on Salesforce",
        input_metadata={"format": "simple_test"}
    )
    
    # Test Agent 4 directly
    result = await agent_4_helix_element_finder(initial_state)
    
    print(f"🤖 Agent 4 Results:")
    print(f"   - Success rate: {result['element_success_rate']:.1%}")
    print(f"   - Strategies generated: {len(result['element_strategies'])}")
    print(f"   - Performance: {result['performance_metrics'].get('agent_4_duration', 0):.2f}s")
    
    return result


if __name__ == "__main__":
    # Run tests
    asyncio.run(test_minimal_workflow())